import chalk from 'chalk'
import * as yargs from 'yargs'
import { cli } from '../cli'
import { SSHService } from '../session'
import { fill, NO_CREDENTIALS_FOUND, SSH_CONNECT_ERROR } from '../utils'

exports.command = 'status'
exports.desc = 'Show the status of your device'

exports.handler = async (_: yargs.Argv) => {
    cli.stream.loading('Fetching device status...')

    const ssh = new SSHService()

    await ssh.connect().catch(e => {
        cli.stream.stopAndClear()
        if (e.name === NO_CREDENTIALS_FOUND) {
            cli.stream.println()
            cli.stream.println('You are not connected to any device')
            cli.stream.println()
            cli.stream.println(`To connect to a device, run ${chalk.blue('sam connect HOSTNAME_OR_IP')}`)
            cli.stream.println(`To list devices on the network, run ${chalk.blue('sam devices')}`)
        } else if (e.name === SSH_CONNECT_ERROR) {
            cli.stream.println()
            if (ssh.credentials.hostname !== undefined && ssh.credentials.hostname !== '') {
                cli.stream.error(`Could not establish connection to ${ssh.credentials.hostname}: ${e.message}`, true)
            } else {
                cli.stream.error(`Could not establish connection to device: ${e.message}`, true)
            }
        } else {
            cli.stream.println()
            cli.stream.error(e.message)
        }
        ssh.disconnect()
        process.exit()
    })

    const servicesStatus: void | { name: string, active: boolean }[] = await ssh.snipsServicesSystemctlStatus().catch(_ => { })
    const packagesVersion: { name: string, version: string }[] | void = await ssh.packagesVersion().catch(_ => {})
    const isSnipsInstalled = (packagesVersion !== undefined && packagesVersion.length > 0)
    const assistant = await ssh.getInstalledAssistant().catch(_ => {})
    const isAssistantInstalled = assistant !== undefined

    let isAnySnipsServiceLive = false
    if (servicesStatus !== undefined) {
        servicesStatus.forEach(serviceStatus => { if (serviceStatus.active) { isAnySnipsServiceLive = true } })
    }

    const deviceName = ssh.credentials.hostname
    const osVersion = await ssh.getOSVersion()
    const assistantStatus = (assistant === undefined) ? 'Not installed' : assistant.name

    cli.stream.stopAndClear()

    let statusString
    if (!isSnipsInstalled) {
        statusString = chalk.red('Snips Platform not installed')
    } else if (!isAnySnipsServiceLive) {
        if (isAssistantInstalled) {
            statusString = chalk.yellow('Idle')
        } else {
            statusString = `${chalk.yellow('Idle')} (no assistant)`
        }
    } else if (!isAssistantInstalled) {
        statusString = `${chalk.green('Live')} (no assistant)`
    } else {
        statusString = chalk.green('Live')
    }

    const tabSize = 30
    let statusText = chalk`\nConnected to device {blue ${deviceName}}\n\n`
    statusText += `${fill('OS version', tabSize)} ${osVersion}\n`

    if (isSnipsInstalled) {
        statusText += `${fill('Installed assistant', tabSize)} ${assistantStatus}\n`
        if (isAssistantInstalled && assistant !== undefined) {
            statusText += `${fill('Language', tabSize)} ${assistant.language}\n`
            statusText += `${fill('Hotword', tabSize)} ${assistant.hotword}\n`
            statusText += `${fill('ASR engine', tabSize)} ${assistant.asr}\n`
        }
    }

    statusText += `${fill('Status', tabSize)} ${statusString}`

    if (isSnipsInstalled && servicesStatus !== undefined) {
        statusText += '\n\nService status:\n\n'

        servicesStatus.forEach(serviceStatus => {
            const version = getPackageVersion(packagesVersion, serviceStatus.name)
            const versionString = (version !== undefined) ? (`${version} `) : ''
            statusText += `${fill(serviceStatus.name, tabSize)} ${versionString}${serviceStatus.active ? chalk.green('(running)') : chalk.red('(not running)')}\n`
        })
    }

    cli.stream.println(statusText)

    if (!isSnipsInstalled) {
        cli.stream.println(`\nYou may install the Snips Platform using ${chalk`{blue sam init}`}\nTo install specific components, check the help using ${chalk`{blue sam init --help}`}`)
    }

    ssh.disconnect()
    process.exit()
}

const getPackageVersion = (packageVersions: { name: string, version: string }[] | void, packageName: string): string | undefined => {
    if (packageVersions === undefined) { return undefined }
    let version: string | undefined = undefined
    packageVersions.forEach(packageVersion => {
        if (packageVersion.name === packageName) {
            version = packageVersion.version
        }
    })
    return version
}
