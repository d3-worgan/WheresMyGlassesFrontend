import * as process from 'process'
import * as yargs from 'yargs'
import chalk from 'chalk'
import cli from '../cli'
import { SSHService, SnipsServices } from '../session'

exports.command = 'init'
exports.desc = 'Install Snips Platform components'

exports.builder = {
    verbose: {
        demandOption: false,
        describe: 'Include remote logs',
        type: 'boolean',
        alias: 'v',
    },
}

exports.handler = async (argv: yargs.Argv) => {
    const verbose = JSON.parse(JSON.stringify(argv)).verbose

    cli.stream.println('Installing Snips Platform components. This may take a few minutes...')

    const ssh = new SSHService()
    await ssh.connect()
    .catch(e => {
        cli.stream.stop()
        cli.stream.error(e)
        process.exit()
    })

    const osVersion = await ssh.getOSVersion()
    if (osVersion.includes('buster') && osVersion.includes('Raspbian')) {
        cli.stream.error('Raspbian Buster is not yet supported by Snips Platform. Please use Raspbian Stretch.')
        ssh.disconnect()
        process.exit()
    }

    let firstPass = true

    try {
        await ssh.installSnips(
            log => { if (verbose) cli.stream.print(log) },
            stepTitle => {
                if (verbose) {
                    cli.stream.println(chalk.green(stepTitle))
                } else {
                    if (!firstPass) cli.stream.success()
                    cli.stream.loading(stepTitle)
                    firstPass = false
                }
            })
    } catch (e) {
        cli.stream.stop()
        cli.stream.error(`Failed to install platform: ${e.stack}`)
        ssh.disconnect()
        process.exit()
    }

    let missingServices = await Promise.all([SnipsServices.asr, SnipsServices.audioServer, SnipsServices.dialogue, SnipsServices.hotword, SnipsServices.nlu, SnipsServices.tts]
        .map(async name => {
            const installed = await ssh.dpkgCheckIfPackageIsInstalled(name)
            return { name, installed }
        }))

    missingServices = missingServices.filter(service => !service.installed)
    if (missingServices.length > 0) {
        cli.stream.error('Something went wrong during the installation process of one or more component')
        missingServices.forEach(service => {
            cli.stream.error(`${service.name} is missing`)
        })
        cli.stream.hint(`Run ${chalk.blue('sam init -v')} to enable verbose mode during installation process`)
        cli.stream.hint("If you still encounter issues, ask for help on Snips' forum: https://forum.snips.ai/")
    } else {
        cli.stream.success('Successfully installed the Snips Platform')
        cli.stream.hint(`You can now setup your audio with ${chalk.blue('sam setup audio')}`)
    }

    ssh.disconnect()
}
