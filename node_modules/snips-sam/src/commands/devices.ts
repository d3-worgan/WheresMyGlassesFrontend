import * as process from 'process'
import cli from '../cli'
import * as yargs from 'yargs'
import { SSHService } from '../session/ssh'
import { getLocalExternalIp, scanNetwork } from '../utils/device'
import chalk from 'chalk'
import shelljs = require('shelljs')

exports.command = 'devices'
exports.desc = 'Discover devices on your local network'

exports.handler = async (_: yargs.Argv) => {
    let devicesIP: string[] | void
    cli.stream.loading('Scanning devices on the network...')

    const ip: string[] = getLocalExternalIp().split('.')
    ip[ip.length - 1] = '255'
    const broadcastAddress = ip.join('.')
    try {
        await shelljs.exec(`ping ${broadcastAddress} -c 2`, { async: true, silent: true })
    } catch (e) {
        cli.stream.stop()
        cli.stream.error(`Broadcasting ping failed on ${broadcastAddress}, some devices may not appear`)
    }

    devicesIP = await scanNetwork()
        .catch(e => {
            cli.stream.stop()
            cli.stream.hint(e.message)
            process.exit()
        })

    if (devicesIP === undefined) {
        cli.stream.stop()
        cli.stream.hint('Apparently no devices were found.')
        cli.stream.hint(`Don't panic, the default hostname is raspberrypi, try connecting with ${chalk.blue('sam connect raspberrypi')}`)
        return process.exit()
    }

    const devicesIPAndHostname = await SSHService.fetchBootHostname(devicesIP)
        .catch(e => {
            cli.stream.stop()
            cli.stream.error(e)
        })
    if (devicesIPAndHostname === undefined) {
        cli.stream.stop()
        cli.stream.error('Error fetching device hostnames')
        return process.exit()
    }

    const devicesList = devicesIPAndHostname.map(({ ip, hostname, snipsHostname }) => {
        if (snipsHostname.length > 0) {
            if (hostname.length === 0) {
                return `- ${ip}, alias: ${snipsHostname}`
            }
            return `- ${hostname} (${ip}, alias: ${snipsHostname})`
        }
        if (hostname.length === 0) {
            return `- ${ip}`
        }
        return `- ${hostname} (${ip})`
    })

    cli.stream.stopAndClear()
    cli.stream.println('\n')

    if (devicesList.length === 1) {
        cli.stream.println('Found 1 device:')
    } else {
        cli.stream.println(`Found ${devicesList.length} devices:\n`)
    }

    devicesList.forEach(device => {
        cli.stream.println(device)
    })

    cli.stream.println(`\nConnect to a device using ${chalk.blue('sam connect HOSTNAME_OR_IP')}`)
    process.exit()
}
