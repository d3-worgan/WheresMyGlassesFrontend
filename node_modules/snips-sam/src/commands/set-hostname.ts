import * as yargs from 'yargs'
import { cli } from '../cli'
import { SSHService } from '../session'

exports.command = 'set-hostname <HOSTNAME>'
exports.desc = 'Set device hostname'

exports.handler = async (argv: yargs.Argv) => {
    let newHostname: string = argv['HOSTNAME']
    if (newHostname.length === 0) {
        cli.stream.error("Hostname can't be empty")
    }
    if (newHostname.includes('.local')) {
        cli.stream.error("You don't need to include the .local, removing it")
        newHostname = newHostname.replace('.local', '')
    }

    const validHostnameRegex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/
    if (!validHostnameRegex.test(newHostname)) {
        cli.stream.error(`The hostname is not valid.\
        \n  Please note: RFCs mandate that a hostname's labels may contain\
        \n  only the ASCII letters 'a' through 'z' (case-insensitive),\
        \n  the digits '0' through '9', and the hyphen.\
        \n  Hostname labels cannot begin or end with a hyphen.\
        \n  No other symbols, punctuation characters, or blank spaces are permitted.`)
        return
    }

    cli.stream.loading('Changing hostname')

    const ssh = new SSHService()
    await ssh.connect().catch(error => {
        cli.stream.error(error)
        process.exit()
    })
    await ssh.setHostname(newHostname)
    .then(_ => {
        cli.stream.success('Device hostname changed. Rebooting now.')
    })
    .catch(error => {
        cli.stream.error(`Error changing hostname, reason: ${error.message}`)
    })
    ssh.disconnect()
}
