import * as yargs from 'yargs'
import { cli } from '../../cli'
import { SSHService,  SnipsServices } from '../../session'
import chalk from 'chalk'
import { SkillSetup } from './actions'

exports.command = 'demo'
exports.desc = 'Install a weather assistant skill demo'

exports.builder = {
    ignore_action_parameters: {
        demandOption: false,
        describe: 'Do not get prompted for action parameters',
        type: 'boolean',
        alias: 'ignore',
        default: false,
    },
}

exports.handler = async (argv: yargs.Argv) => {
    const ignore: boolean = JSON.parse(JSON.stringify(argv)).ignore_action_parameters

    const ssh = new SSHService()
    await ssh.connect()
    .catch(e => {
        cli.stream.error(e)
        process.exit()
    })

    cli.stream.loading('Installing Snips fake weather demo')
    await ssh.aptGetY(['snips-platform-demo', SnipsServices.skillServer, SnipsServices.template], _ => {})
    cli.stream.success()

    try {
        const skillSetup = new SkillSetup(ssh, ignore, 'https://github.com/snipsco/snips-skill-weather-tts.git')
        await skillSetup.run()

        await ssh.relaunchServices().catch(_ => {})

        const assistant = await ssh.getInstalledAssistant()
        if (assistant !== undefined) {
            cli.stream.success(`Snips assistant is now running. Say ${chalk.blue(assistant.hotword)} to start!`)
        } else {
            cli.stream.success('Snips assistant is now running')
        }
        cli.stream.hint(`Run ${chalk.blue('sam watch')} to see the logs`)
    } catch (error) {
        cli.stream.error(error)
    }

    ssh.disconnect()
    process.exit()
}
