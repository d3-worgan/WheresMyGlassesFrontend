import * as process from 'process'
import * as yargs from 'yargs'
import cli from '../cli'
import { Config } from '../utils'
import { SSHService, snipsRemoteAuthorizedKeysFilename } from '../session'

exports.command = 'connect <HOSTNAME_OR_IP>'
exports.desc = 'Connect to a device'

exports.handler = async (argv: yargs.Argv) => {
    const hostname: string = argv['HOSTNAME_OR_IP']
    let username: string = ''
    let password: string = ''

    try {
        const response = await cli.prompt.promptQuestions([Config.usernameQuestion, Config.passwordQuestion])
        username = response['username']
        password = response['password']
    } catch (e) {
        cli.stream.println()
        cli.stream.error(`Error connecting to device: ${e.message}`, true)
        process.exit()
    }

    if (password.length === 0) {
        cli.stream.error('Password cannot be blank')
        process.exit()
    }

    const onConnected = () => {
        cli.stream.stopAndClear()
        cli.stream.success(`Connected to ${hostname}`, true)
    }

    const onSSHCopyId = () => {
        cli.stream.hint(`A public key has been generated and copied to the device at ${hostname}:${snipsRemoteAuthorizedKeysFilename}`)
    }

    const onSSHKeygenNotFound = async (sshKeygenPath: string) => {
        cli.stream.error(`Didn't find the ssh-keygen.exe located in ${sshKeygenPath}`)
        const isGitInstalled = await cli.prompt.promptQuestions([
            {
                name: 'isInstalled',
                type: 'confirm',
                message: 'Do you have Git already installed on your computer?',
            },
        ])

        if (isGitInstalled['isInstalled'] === false) {
            cli.stream.hint('You need to install Git https://git-scm.com/downloads. Aborting')
            ssh.disconnect()
            process.exit()
        } else {
            const path = await cli.prompt.promptQuestions([
                {
                    name: 'path',
                    type: 'string',
                    message: "Specify the path to Git's ssh-keygen.exe",
                },
            ])
            return path['path']
        }
    }

    const onCredentialsSaved = () => {}

    const ssh = new SSHService()
    let error = false

    cli.stream.loading(`Connecting to ${hostname}`)

    let initialError: string | undefined = undefined
    await ssh.newConnection({ hostname, username }, password, onConnected, onSSHCopyId, onCredentialsSaved, onSSHKeygenNotFound).catch(e => {
        error = true
        initialError = e.message
    })
    if (error) {
        await ssh.newConnection({ username, hostname: `${hostname}.local` }, password, onConnected, onSSHCopyId, onCredentialsSaved, onSSHKeygenNotFound)
            .catch(e => {
                cli.stream.stopAndClear()
                cli.stream.println()
                cli.stream.error((initialError !== undefined) ? initialError : e.message, true)
                process.exit()
            })
    }

    ssh.disconnect()
    process.exit()
}
