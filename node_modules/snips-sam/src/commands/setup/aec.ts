import chalk from 'chalk'
import * as yargs from 'yargs'
import { cli } from '../../cli'
import { SSHService, SnipsServices } from '../../session/ssh'

exports.command = 'aec'
exports.desc = 'Enable audio echo-cancellation (AEC) through PulseAudio'

exports.builder = {
    verbose: {
        demandOption: false,
        describe: 'Include remote logs',
        type: 'boolean',
        alias: 'v',
    },
}

exports.handler = async (argv: yargs.Argv) => {
    const verbose = JSON.parse(JSON.stringify(argv)).verbose
    const ssh = new SSHService()
    try {
        await ssh.connect()
    } catch (e) {
        cli.stream.error(e)
        process.exit()
    }

    const verbosePrinter = (output: string) => {
        if (verbose) {
            cli.stream.print(output)
        }
    }

    cli.stream.warning('This is a beta feature')
    cli.stream.hint('Audio echo-cancellation will improve wake word detection and automatic speech recognition performances when music is played via the device.\nIt is a feature of PulseAudio, thus to activate it Sam will also install PulseAudio.')

    const answers = await cli.prompt.promptQuestions([
        {
            name: 'echoCancel',
            type: 'confirm',
            message: 'Do you wish to proceed?',
        },
    ])
    const hasEchoCancel: boolean = answers['echoCancel']

    if (hasEchoCancel) {
        try {
            try {
                if (!verbose) {
                    cli.stream.loading('Setup echo cancellation default')
                } else {
                    cli.stream.println(chalk.green('Setup echo cancellation default'))
                }
                const mic = 'alsa_input.platform-soc_sound.analog-stereo'
                const speaker = 'alsa_output.platform-soc_sound.analog-stereo'
                await ssh.setupEchoCancel(mic, speaker, verbosePrinter)
                if (!verbose) cli.stream.success()
            } catch (e) {
                throw new Error('Failed to setup default echo cancellation config')
            }

            // let pulseaudio start
            await new Promise(resolve => setTimeout(resolve, 5000))

            let source
            try {
                const sources = await ssh.listPulseSources()
                if (sources.length === 1) {
                    cli.stream.success(`Found only 1 capture device named: ${sources[0].description}`)
                    source = sources[0]
                } else {
                    const response = await cli.prompt.promptList(
                        'device',
                        `Found ${sources.length} interfaces to record sound.\n  Choose the one you want to use`,
                        sources.map(device => device.description),
                    )
                    source = sources.find(device => device.description === response['device'])
                }
            } catch (e) {
                throw new Error('Failed to pick a pulseaudio source')
            }

            let sink
            try {
                const sinks = await ssh.listPulseSinks()
                if (sinks.length === 1) {
                    cli.stream.success(`Found only 1 playback device named: ${sinks[0].description}`)
                    sink = sinks[0]
                } else {
                    const response = await cli.prompt.promptList(
                        'device',
                        `Found ${sinks.length} interfaces to play sound.\n  Choose the one you want to use`,
                        sinks.map(device => device.description),
                    )
                    sink = sinks.find(device => device.description === response['device'])
                }
            } catch (e) {
                throw new Error('Failed to pick a pulseaudio sink')
            }

            try {
                if (!verbose) {
                    cli.stream.loading('Change PulseAudio settings')
                } else {
                    cli.stream.println(chalk.green('Change PulseAudio settings'))
                }
                await ssh.tuneEchoCancel(source.name, sink.name, verbosePrinter)
                if (!verbose) cli.stream.success()
            } catch (e) {
                throw new Error('Failed to configure pulseaudio source/sink')
            }
        } catch (e) {
            cli.stream.error(e.message)
            ssh.disconnect()
            process.exit()
        }

        cli.stream.loading('Restarting snips-audio-server service')
        await ssh.relaunchService(SnipsServices.audioServer).catch(_ => {})
        cli.stream.done()
        cli.stream.hint(chalk`You can test your microphone & speaker with {blue sam test microphone / speaker}`)
    }

    ssh.disconnect()
}
