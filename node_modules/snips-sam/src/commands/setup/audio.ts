import chalk from 'chalk'
import * as yargs from 'yargs'
import { cli } from '../../cli'
import { AudioDevice } from '../../utils/audiodevice'
import { SSHService, SnipsServices } from '../../session/ssh'

exports.command = 'audio'
exports.desc = 'Quickly setup the mic & speaker on your device'

exports.builder = {
    verbose: {
        demandOption: false,
        describe: 'Include remote logs',
        type: 'boolean',
        alias: 'v',
    },
}

exports.handler = async (argv: yargs.Argv) => {
    const verbose = JSON.parse(JSON.stringify(argv)).verbose
    const ssh = new SSHService()
    try {
        await ssh.connect()
    } catch (e) {
        cli.stream.error(e)
        process.exit()
    }

    const verbosePrinter = (output: string) => {
        if (verbose) {
            cli.stream.print(output)
        }
    }
    const verboseLNPrinter = (output: string) => {
        if (verbose) {
            cli.stream.println(output)
        }
    }

    const answers = await cli.prompt.promptQuestions([
        {
            name: 'makersKit',
            type: 'confirm',
            message: 'Is it a Snips Makers Kit?',
        },
    ])

    const isMakersKit: boolean = answers['makersKit']

    if (isMakersKit) {
        if (!verbose) {
            cli.stream.loading('Installing ReSpeaker 2 mic hat')
        } else {
            cli.stream.println(chalk.green('Installing ReSpeaker 2 mic hat'))
        }

        try {
            const isGitInstalled = await ssh.checkCommandExists('git')

            if (!isGitInstalled) {
                verboseLNPrinter(chalk.green('Installing Git'))
                await ssh.aptGetY(['git'], verbosePrinter)
            }

            await ssh.installRespeakerMicHat(verbosePrinter)
            if (!verbose) cli.stream.success()
            const hasSnipsSkillsGroup = await ssh.dpkgCheckIfPackageIsInstalled(SnipsServices.template)

            if (!hasSnipsSkillsGroup) {
                verboseLNPrinter(chalk.green('Installing snips-template & snips-skill-server'))
                await ssh.aptGetY([SnipsServices.template, SnipsServices.skillServer], verbosePrinter)
            }

            await ssh.addCurrentUserToSnipsSkillsAdminGroup()
            verboseLNPrinter(chalk.green('sudo usermod -a -G spi,gpio,audio _snips-skills'))
            verboseLNPrinter(chalk.green('sudo raspi-config nonint do_spi 1'))
            await ssh.run('sudo usermod -a -G spi,gpio,audio _snips-skills')
            await ssh.run('sudo raspi-config nonint do_spi 1')

            if (!verbose) {
                cli.stream.loading('Installing ReSpeaker Snips skill. This could take a while.')
            } else {
                cli.stream.println(chalk.green('Installing ReSpeaker Snips skill. This could take a while.'))
            }

            const isVirtualEnvInstalled = await ssh.checkCommandExists('virtualenv')

            if (!isVirtualEnvInstalled) {
                verboseLNPrinter(chalk.green('Installing python, pip & virtualenv'))
                await ssh.installPythonAndPip(verbosePrinter)
            }

            verboseLNPrinter(chalk.green('Cloning snips-skill-respeaker'))
            await ssh.gitClone('https://github.com/snipsco/snips-skill-respeaker.git', undefined, verbosePrinter, verbosePrinter)
            await ssh.stopService(SnipsServices.skillServer)
            verboseLNPrinter(chalk.green('Setting up snips-skill-respeaker'))
            await ssh.runSkillSetupSH('snips-skill-respeaker')

            if (!verbose) cli.stream.success()

        } catch (e) {
            cli.stream.error(e.message)
        }

        await ssh.reboot().catch(_ => {})

        let loadingText = 'Rebooting device.'
        cli.stream.loading(loadingText)
        const isConnected = await ssh.retryConnect(
            retries => {
                loadingText += ' . '
                cli.stream.update(loadingText)
                // After 30s, the device may be stuck so we ask the user to reboot manually.
                if (retries === 6) {
                    cli.stream.println()
                    cli.stream.hint('This seems to be taking a long time, please unplug and power up the raspberry manually.')
                    loadingText = ''
                }
            },
            30)

        if (isConnected) {
            cli.stream.done()
            cli.stream.success('Device has rebooted')
        } else {
            cli.stream.error('Failed to reconnect, try a hard reboot')
        }
    }

    let captureDevice: AudioDevice | undefined
    try {
        const captureDevices = await ssh.listCaptureDevices()
        if (captureDevices.length === 1) {
            cli.stream.success(`Found only 1 capture device named: ${captureDevices[0].name}`)
            cli.stream.hint('Using this device to capture sound')
            captureDevice = captureDevices[0]
        } else {
            const response = await cli.prompt.promptList(
                'device',
                `Found ${captureDevices.length} interfaces to record sound.\n  Choose the one you want to use`,
                captureDevices.map(device => device.name),
            )
            captureDevice = captureDevices.find(device => device.name === response['device'])
        }
    } catch (e) {
        cli.stream.error(`Error fetching audio capture device: ${e.message}`)
        cli.stream.hint('If the microphone is not connected through USB, you might need to install it yourself. See the manufacturers installation guide')
    }
    if (captureDevice === undefined) {
        cli.stream.hint('Using default capture configuration card 1 subdevice 0')
        captureDevice = { name: 'Default', card: 1, subdevice: 0 }
    }

    let outputDevice: AudioDevice | undefined
    try {
        const outputDevices = await ssh.listOuputDevices()
        if (outputDevices.length === 1) {
            cli.stream.success(`Found only 1 output device named: ${outputDevices[0].name}`)
            cli.stream.hint('Using this device to output sound')
            outputDevice = outputDevices[0]
        } else {
            const response = await cli.prompt.promptList(
                'device',
                `Found ${outputDevices.length} interfaces to output sound.\n  Choose the one you want to use as your speaker`,
                outputDevices.map(device => device.name),
            )
            outputDevice = outputDevices.find(device => device.name === response['device'])
        }
    } catch (e) {
        cli.stream.error(`Error fetching audio output device: ${e.message}`)
    }
    if (outputDevice === undefined) {
        cli.stream.error("An output device wasn't found")
        return
    }

    try {
        await ssh.setupAsoundConf(outputDevice, captureDevice)
        cli.stream.success('Installed /etc/asound.conf')
    } catch (e) {
        cli.stream.error(`Error installing the microphone asound.conf: ${e.message}`)
        ssh.disconnect()
        process.exit()
    }

    cli.stream.println('Setting to volume to 90% if possible')
    await ssh.setVolumeLevel(outputDevice.card, 90).catch(_ => {})

    cli.stream.loading('Restarting snips-audio-server service')
    await ssh.relaunchService(SnipsServices.audioServer).catch(_ => {})
    cli.stream.done()

    cli.stream.hint(chalk`You can test your microphone & speaker with {blue sam test microphone / speaker}`)
    ssh.disconnect()
}
