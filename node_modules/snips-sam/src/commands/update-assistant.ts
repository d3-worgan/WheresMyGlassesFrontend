import * as yargs from 'yargs'
import { cli } from '../cli'
import { SSHService, ConsoleClient } from '../session'
import chalk from 'chalk'
import * as shelljs from 'shelljs'
import { SkillSetup } from './install/actions'

exports.command = 'update-assistant'
exports.desc = 'Update the assistant already installed on the device'

exports.builder = {
    ignore_action_parameters: {
        demandOption: false,
        describe: 'Do not get prompted for action parameters',
        type: 'boolean',
        alias: 'ignore',
        default: false,
    },
}

exports.handler = async (argv: yargs.Argv) => {
    const ignore: boolean = JSON.parse(JSON.stringify(argv)).ignore_action_parameters

    const ssh = new SSHService()
    await ssh.connect()
    .catch(e => {
        cli.stream.error(e)
        process.exit()
    })

    const client = new ConsoleClient()
    const assistant = await ssh.getInstalledAssistant()
    if (assistant === undefined) {
        cli.stream.error("Couldn't find an assistant on your device")
        ssh.disconnect()
        process.exit(0)
        return
    }

    cli.stream.println('Updating assistant')
    await client.downloadAssistant(
        assistant.id,
        steps => {
            cli.stream.done()
            cli.stream.loading(steps)
        })
    .then(assistantPath => {
        cli.stream.loading(`Deploying assistant to ${ssh.credentials.hostname}...`)
        return ssh.installAssistant(assistantPath)
        .then(_ => shelljs.rm('-rf', assistantPath))
    })
    .then(_ => cli.stream.success())
    .catch(e => {
        cli.stream.error(`Unable to install the assistant: ${e.message}`)
        ssh.disconnect()
        process.exit()
    })

    try {
        const skillSetup = new SkillSetup(ssh, ignore)
        await skillSetup.run()

        await ssh.relaunchServices().catch(_ => {})

        const assistant = await ssh.getInstalledAssistant()
        if (assistant !== undefined) {
            cli.stream.success(`Snips assistant is now running. Say ${chalk.blue(assistant.hotword)} to start!`)
        } else {
            cli.stream.success('Snips assistant is now running')
        }
        cli.stream.hint(`Run ${chalk.blue('sam watch')} to see the logs`)
    } catch (error) {
        cli.stream.error(error)
    }

    ssh.disconnect()
    process.exit()
}
