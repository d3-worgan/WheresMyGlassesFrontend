import * as yargs from 'yargs'
import { cli } from '../../cli'
import { SSHService } from '../../session'

exports.command = 'persistence <toggle>'
exports.desc = 'Toggle mosquitto persistence, if turned off it will also delete /etc/mosquitto/mosquitto.db'

exports.builder = yargs => {
    return yargs
    .positional('toggle', {
        describe: 'Toggle mosquitto persistence',
        type: 'string',
        choices: ['on', 'off'],
        demandOption: true,
    })
}

exports.handler = async (argv: yargs.Argv) => {
    const ssh = new SSHService()
    const toggle: string = JSON.parse(JSON.stringify(argv)).toggle
    const mqttToggle = toggle === 'on' ? true : false

    try {
        await ssh.connect()

        await ssh.stopService('mosquitto')
        .then(_ => cli.stream.success('Mosquitto.service has been stopped'))
        .catch(e => cli.stream.println(`Failed to stop MQTT service, reason: ${e}`))

        if (mqttToggle) {
            await ssh.toggleMQTTLogPersistance(mqttToggle)
            .then(_ => cli.stream.success('Enabled Mosquitto persistence in /etc/mosquitto/mosquitto.conf'))
            .catch(e => cli.stream.println(`Failed to enable MQTT persistence, reason: ${e}`))
        } else {
            await ssh.deleteMosquittoDB()
            .then(_ => cli.stream.success('Deleted /etc/mosquitto/mosquitto.db'))
            .catch(_ => {})
            await ssh.toggleMQTTLogPersistance(mqttToggle)
            .then(_ => cli.stream.success('Disabled Mosquitto persistence in /etc/mosquitto/mosquitto.conf'))
            .catch(e => cli.stream.println(`Failed to disable MQTT service persistence, reason: ${e}`))
        }

        await ssh.relaunchService('mosquitto')
        await ssh.relaunchServices()
        cli.stream.success('Relaunched all services')
    } catch (e) {
        cli.stream.error(e)
        process.exit()
    }
    ssh.disconnect()
}
