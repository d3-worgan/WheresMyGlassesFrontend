
import * as yaml from 'js-yaml'
import * as path from 'path'
import * as fs from 'fs'
import { AssistantFile } from '.'
import { samConfigDirectory } from '../utils'

export class HassConfiguration {

    static parse(file: string): any {
        // Because Home Assistant has some custom types not includes in the default YAML to include yaml, we replace the ! with a dot.
        // Ideally we would load all the yaml files and have one huge configuration file.
        // Since we operate on a remote device, we first download the main yaml configuration. Thus it is problematic to find all the yaml files that could be scattered all over the system.
        const stringRepresentation = file.replace(/!(include|secret|include_dir_list|include_dir_named|include_dir_merge_list|include_dir_merge_named)/g, '.$1')
        return yaml.safeLoad(stringRepresentation, { json: true })
    }

    static generateSnipsConfiguration(originalYaml: {}, assistant: AssistantFile, hassSnippets: Map<string, string[]>) {
        const intentsJSON = {}

        hassSnippets.forEach((actions, skillName) => {
            actions.forEach(action => {
                const intent = assistant.intents.find(intent => action.toLowerCase() === intent.id.toLowerCase())
                if (intent === undefined) return

                const dataTemplate = {}
                intent.slots.forEach(slot => {
                    dataTemplate[slot.name] = `{{ ${slot.name} }}`
                })
                const service = `python_script.action_${action.toLowerCase()}_${skillName}`
                intentsJSON[intent.id] = { action: [{ service, data_template: dataTemplate }] }
            })
        })

        delete originalYaml['snips']
        delete originalYaml['python_script']
        delete originalYaml['intent_script']
        if (originalYaml['mqtt'] === undefined) {
            originalYaml['mqtt'] = { broker: '127.0.0.1', port: 1883 }
        }
        originalYaml['python_script'] = null
        originalYaml['snips'] = null
        originalYaml['intent_script'] = intentsJSON
        const snipsYAML = yaml.safeDump(originalYaml)
        .replace(/.(include|secret|include_dir_list|include_dir_named|include_dir_merge_list|include_dir_merge_named)/g, '!$1')
        .replace(/null/g, '')

        const filePath = path.join(samConfigDirectory, 'hassconfiguration.yaml')
        fs.writeFileSync(filePath, snipsYAML)
        return filePath
    }
}

export class HassMQTT {
    broker?: string
    port?: number

    constructor(yamlDoc: any) {
        if (!yamlDoc) return
        this.broker = yamlDoc.broker
        this.port = yamlDoc.port
    }
}
