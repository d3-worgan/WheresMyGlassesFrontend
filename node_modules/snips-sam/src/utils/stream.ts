// tslint:disable-next-line:no-var-requires
const ora = require('ora')('')

import chalk from 'chalk'

export class Stream {

    private output: NodeJS.WriteStream
    private tab: string = ''

    constructor(output: NodeJS.WriteStream) {
        this.output = output
    }

    public loading(text: string) {
        ora.text = text
        ora.start()
    }

    public update(text: string) {
        ora.text = text
    }

    public stop() {
        ora.stopAndPersist()
    }

    public stopAndClear() {
        ora.stop()
    }

    public success(text?: string, fullColor: boolean = false) {
        ora.succeed(fullColor && (text !== undefined) ? chalk.green(text) : text)
    }

    public successNoCheck(text: string) {
        this.println(chalk.green(text))
        // ora.succeed(fullColor && (text !== undefined ) ? chalk.green(text) : text);
    }

    public done(appendDone: boolean = true) {
        if (ora.text) {
            ora.stop()
            if (appendDone) {
                this.println(`${ora.text} done`)
            } else {
                this.println(`${ora.text}`)
            }
            // ora.stopAndPersist({ text: `${ora.text} done` });
        } else {
            ora.stopAndPersist()
        }
    }

    public ok(text: string) {
        ora.stopAndPersist({ text: `[OK] ${text}` })
    }

    public error(text: string | undefined, fullColor: boolean = true) {
        if (text === undefined) {
            ora.fail(undefined)
        } else {
            // ora.stopAndPersist();
            ora.fail(fullColor ? chalk.red(text) : text)
        }
    }

    public errorPlain(text: string) {
        this.println(chalk.red(`${text}`))
    }

    public warning(text: string) {
        this.println(chalk.yellow(`${text}`))
    }

    public hint(text: string) {
        this.output.write(`${chalk.blue('i')} ${text} \n`)
    }

    public println(text?: string | undefined) {
        if (text === undefined) {
            this.output.write('\n')
            return
        }
        const indented = text.split('\n').map(l => this.tab + l).join('\n')
        this.output.write(`${indented} \n`)
    }

    public print(text: string) {
        const indented = text.split('\n').map(l => this.tab + l).join('\n')
        this.output.write(indented)
    }

    public log(tag: string, text: string) {
        this.println(`[${tag}] ${text}`)
    }
}
