import path = require('path')
import { User, DeviceCredentials, ConsoleToken } from '../models'
import * as fs from 'fs-extra'
import * as yaml from 'js-yaml'
import * as os from 'os'

export const samConfigDirectory = path.join(os.homedir(), '.sam')
const configurationName = 'configuration.yml'

export const localConfigurationFilePath = path.join(samConfigDirectory, configurationName)

export class Config {
    credentials?: DeviceCredentials
    user?: User
    consoleToken?: ConsoleToken

    constructor() {
        this.load()
    }

    load() {
        try {
            fs.ensureFileSync(localConfigurationFilePath)
            const cfg = yaml.safeLoad(fs.readFileSync(localConfigurationFilePath, 'utf8'))
            if (!cfg) return
            if (cfg['credentials']) this.credentials = cfg['credentials']
            if (cfg['user']) this.user = cfg['user']
            if (cfg['token']) this.consoleToken = cfg['token']
        } catch (e) {
            throw new Error(`No config found on disk ${e.message}`)
        }
    }

    public async save() {
        const ymlFile = yaml.safeDump({ credentials: this.credentials ? this.credentials : null, user: this.user ? this.user : null, token: this.consoleToken ? this.consoleToken : null })
        return fs.outputFile(localConfigurationFilePath, ymlFile)
    }

    static hostnameQuestion = [
        {
            name: 'hostname',
            type: 'input',
            default: 'hostname.local',
            message: 'Enter your device hostname or IP:',
            validate: value => {
                if (value.length) return true
                return 'Hostname cannot be blank'
            },
        },
    ]

    static usernameQuestion = [
        {
            name: 'username',
            type: 'username',
            default: 'pi',
            message: 'Enter username for the device:',
            validate: value => {
                if (value.length) return true
                return 'Username cannot be blank'
            },
        },
    ]

    static passwordQuestion = [
        {
            name: 'password',
            type: 'password',
            default: 'raspberry',
            message: 'Enter password for the device:',
            validate: value => {
                if (value.length) return true
                return 'Password cannot be blank'
            },
        },
    ]
}
