import { setTimeout, clearTimeout } from 'timers'

export const timeout = async (ms: number) => new Promise(res => setTimeout(res, ms))

export class Deferred<T> {
    promise: Promise<T>
    resolve: (value?: T | PromiseLike<T>) => void
    reject:  (reason?: any) => void
    timeoutTimer: NodeJS.Timer

    /**
    * Return a deferred promise with an optional timeout
    *
    * @param timeout duration in ms before the promise is rejected
    */
    constructor(timeout: number | undefined) {
        if (timeout !== undefined) {
            this.timeoutTimer = setTimeout(() => {
                this.reject(`${timeout}ms timeout`)
            },                             timeout)
        }
        this.promise = new Promise<T>((resolve, reject) => {
            this.resolve = resolve
            this.reject  = reject
        })
        .then(r => {
            clearTimeout(this.timeoutTimer)
            return r
        })
        .catch(e => {
            clearTimeout(this.timeoutTimer)
            return e
        })

    }
}
