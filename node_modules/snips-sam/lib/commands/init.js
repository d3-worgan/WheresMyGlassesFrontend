"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const process = require("process");
const chalk_1 = require("chalk");
const cli_1 = require("../cli");
const session_1 = require("../session");
exports.command = 'init';
exports.desc = 'Install Snips Platform components';
exports.builder = {
    verbose: {
        demandOption: false,
        describe: 'Include remote logs',
        type: 'boolean',
        alias: 'v',
    },
};
exports.handler = (argv) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const verbose = JSON.parse(JSON.stringify(argv)).verbose;
    cli_1.default.stream.println('Installing Snips Platform components. This may take a few minutes...');
    const ssh = new session_1.SSHService();
    yield ssh.connect()
        .catch(e => {
        cli_1.default.stream.stop();
        cli_1.default.stream.error(e);
        process.exit();
    });
    const osVersion = yield ssh.getOSVersion();
    if (osVersion.includes('buster') && osVersion.includes('Raspbian')) {
        cli_1.default.stream.error('Raspbian Buster is not yet supported by Snips Platform. Please use Raspbian Stretch.');
        ssh.disconnect();
        process.exit();
    }
    let firstPass = true;
    try {
        yield ssh.installSnips(log => { if (verbose)
            cli_1.default.stream.print(log); }, stepTitle => {
            if (verbose) {
                cli_1.default.stream.println(chalk_1.default.green(stepTitle));
            }
            else {
                if (!firstPass)
                    cli_1.default.stream.success();
                cli_1.default.stream.loading(stepTitle);
                firstPass = false;
            }
        });
    }
    catch (e) {
        cli_1.default.stream.stop();
        cli_1.default.stream.error(`Failed to install platform: ${e.stack}`);
        ssh.disconnect();
        process.exit();
    }
    let missingServices = yield Promise.all([session_1.SnipsServices.asr, session_1.SnipsServices.audioServer, session_1.SnipsServices.dialogue, session_1.SnipsServices.hotword, session_1.SnipsServices.nlu, session_1.SnipsServices.tts]
        .map((name) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const installed = yield ssh.dpkgCheckIfPackageIsInstalled(name);
        return { name, installed };
    })));
    missingServices = missingServices.filter(service => !service.installed);
    if (missingServices.length > 0) {
        cli_1.default.stream.error('Something went wrong during the installation process of one or more component');
        missingServices.forEach(service => {
            cli_1.default.stream.error(`${service.name} is missing`);
        });
        cli_1.default.stream.hint(`Run ${chalk_1.default.blue('sam init -v')} to enable verbose mode during installation process`);
        cli_1.default.stream.hint("If you still encounter issues, ask for help on Snips' forum: https://forum.snips.ai/");
    }
    else {
        cli_1.default.stream.success('Successfully installed the Snips Platform');
        cli_1.default.stream.hint(`You can now setup your audio with ${chalk_1.default.blue('sam setup audio')}`);
    }
    ssh.disconnect();
});
//# sourceMappingURL=init.js.map