"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("../cli");
const session_1 = require("../session");
const chalk_1 = require("chalk");
const shelljs = require("shelljs");
const actions_1 = require("./install/actions");
exports.command = 'update-assistant';
exports.desc = 'Update the assistant already installed on the device';
exports.builder = {
    ignore_action_parameters: {
        demandOption: false,
        describe: 'Do not get prompted for action parameters',
        type: 'boolean',
        alias: 'ignore',
        default: false,
    },
};
exports.handler = (argv) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const ignore = JSON.parse(JSON.stringify(argv)).ignore_action_parameters;
    const ssh = new session_1.SSHService();
    yield ssh.connect()
        .catch(e => {
        cli_1.cli.stream.error(e);
        process.exit();
    });
    const client = new session_1.ConsoleClient();
    const assistant = yield ssh.getInstalledAssistant();
    if (assistant === undefined) {
        cli_1.cli.stream.error("Couldn't find an assistant on your device");
        ssh.disconnect();
        process.exit(0);
        return;
    }
    cli_1.cli.stream.println('Updating assistant');
    yield client.downloadAssistant(assistant.id, steps => {
        cli_1.cli.stream.done();
        cli_1.cli.stream.loading(steps);
    })
        .then(assistantPath => {
        cli_1.cli.stream.loading(`Deploying assistant to ${ssh.credentials.hostname}...`);
        return ssh.installAssistant(assistantPath)
            .then(_ => shelljs.rm('-rf', assistantPath));
    })
        .then(_ => cli_1.cli.stream.success())
        .catch(e => {
        cli_1.cli.stream.error(`Unable to install the assistant: ${e.message}`);
        ssh.disconnect();
        process.exit();
    });
    try {
        const skillSetup = new actions_1.SkillSetup(ssh, ignore);
        yield skillSetup.run();
        yield ssh.relaunchServices().catch(_ => { });
        const assistant = yield ssh.getInstalledAssistant();
        if (assistant !== undefined) {
            cli_1.cli.stream.success(`Snips assistant is now running. Say ${chalk_1.default.blue(assistant.hotword)} to start!`);
        }
        else {
            cli_1.cli.stream.success('Snips assistant is now running');
        }
        cli_1.cli.stream.hint(`Run ${chalk_1.default.blue('sam watch')} to see the logs`);
    }
    catch (error) {
        cli_1.cli.stream.error(error);
    }
    ssh.disconnect();
    process.exit();
});
//# sourceMappingURL=update-assistant.js.map