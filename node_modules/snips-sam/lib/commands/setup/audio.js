"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const cli_1 = require("../../cli");
const ssh_1 = require("../../session/ssh");
exports.command = 'audio';
exports.desc = 'Quickly setup the mic & speaker on your device';
exports.builder = {
    verbose: {
        demandOption: false,
        describe: 'Include remote logs',
        type: 'boolean',
        alias: 'v',
    },
};
exports.handler = (argv) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const verbose = JSON.parse(JSON.stringify(argv)).verbose;
    const ssh = new ssh_1.SSHService();
    try {
        yield ssh.connect();
    }
    catch (e) {
        cli_1.cli.stream.error(e);
        process.exit();
    }
    const verbosePrinter = (output) => {
        if (verbose) {
            cli_1.cli.stream.print(output);
        }
    };
    const verboseLNPrinter = (output) => {
        if (verbose) {
            cli_1.cli.stream.println(output);
        }
    };
    const answers = yield cli_1.cli.prompt.promptQuestions([
        {
            name: 'makersKit',
            type: 'confirm',
            message: 'Is it a Snips Makers Kit?',
        },
    ]);
    const isMakersKit = answers['makersKit'];
    if (isMakersKit) {
        if (!verbose) {
            cli_1.cli.stream.loading('Installing ReSpeaker 2 mic hat');
        }
        else {
            cli_1.cli.stream.println(chalk_1.default.green('Installing ReSpeaker 2 mic hat'));
        }
        try {
            const isGitInstalled = yield ssh.checkCommandExists('git');
            if (!isGitInstalled) {
                verboseLNPrinter(chalk_1.default.green('Installing Git'));
                yield ssh.aptGetY(['git'], verbosePrinter);
            }
            yield ssh.installRespeakerMicHat(verbosePrinter);
            if (!verbose)
                cli_1.cli.stream.success();
            const hasSnipsSkillsGroup = yield ssh.dpkgCheckIfPackageIsInstalled(ssh_1.SnipsServices.template);
            if (!hasSnipsSkillsGroup) {
                verboseLNPrinter(chalk_1.default.green('Installing snips-template & snips-skill-server'));
                yield ssh.aptGetY([ssh_1.SnipsServices.template, ssh_1.SnipsServices.skillServer], verbosePrinter);
            }
            yield ssh.addCurrentUserToSnipsSkillsAdminGroup();
            verboseLNPrinter(chalk_1.default.green('sudo usermod -a -G spi,gpio,audio _snips-skills'));
            verboseLNPrinter(chalk_1.default.green('sudo raspi-config nonint do_spi 1'));
            yield ssh.run('sudo usermod -a -G spi,gpio,audio _snips-skills');
            yield ssh.run('sudo raspi-config nonint do_spi 1');
            if (!verbose) {
                cli_1.cli.stream.loading('Installing ReSpeaker Snips skill. This could take a while.');
            }
            else {
                cli_1.cli.stream.println(chalk_1.default.green('Installing ReSpeaker Snips skill. This could take a while.'));
            }
            const isVirtualEnvInstalled = yield ssh.checkCommandExists('virtualenv');
            if (!isVirtualEnvInstalled) {
                verboseLNPrinter(chalk_1.default.green('Installing python, pip & virtualenv'));
                yield ssh.installPythonAndPip(verbosePrinter);
            }
            verboseLNPrinter(chalk_1.default.green('Cloning snips-skill-respeaker'));
            yield ssh.gitClone('https://github.com/snipsco/snips-skill-respeaker.git', undefined, verbosePrinter, verbosePrinter);
            yield ssh.stopService(ssh_1.SnipsServices.skillServer);
            verboseLNPrinter(chalk_1.default.green('Setting up snips-skill-respeaker'));
            yield ssh.runSkillSetupSH('snips-skill-respeaker');
            if (!verbose)
                cli_1.cli.stream.success();
        }
        catch (e) {
            cli_1.cli.stream.error(e.message);
        }
        yield ssh.reboot().catch(_ => { });
        let loadingText = 'Rebooting device.';
        cli_1.cli.stream.loading(loadingText);
        const isConnected = yield ssh.retryConnect(retries => {
            loadingText += ' . ';
            cli_1.cli.stream.update(loadingText);
            if (retries === 6) {
                cli_1.cli.stream.println();
                cli_1.cli.stream.hint('This seems to be taking a long time, please unplug and power up the raspberry manually.');
                loadingText = '';
            }
        }, 30);
        if (isConnected) {
            cli_1.cli.stream.done();
            cli_1.cli.stream.success('Device has rebooted');
        }
        else {
            cli_1.cli.stream.error('Failed to reconnect, try a hard reboot');
        }
    }
    let captureDevice;
    try {
        const captureDevices = yield ssh.listCaptureDevices();
        if (captureDevices.length === 1) {
            cli_1.cli.stream.success(`Found only 1 capture device named: ${captureDevices[0].name}`);
            cli_1.cli.stream.hint('Using this device to capture sound');
            captureDevice = captureDevices[0];
        }
        else {
            const response = yield cli_1.cli.prompt.promptList('device', `Found ${captureDevices.length} interfaces to record sound.\n  Choose the one you want to use`, captureDevices.map(device => device.name));
            captureDevice = captureDevices.find(device => device.name === response['device']);
        }
    }
    catch (e) {
        cli_1.cli.stream.error(`Error fetching audio capture device: ${e.message}`);
        cli_1.cli.stream.hint('If the microphone is not connected through USB, you might need to install it yourself. See the manufacturers installation guide');
    }
    if (captureDevice === undefined) {
        cli_1.cli.stream.hint('Using default capture configuration card 1 subdevice 0');
        captureDevice = { name: 'Default', card: 1, subdevice: 0 };
    }
    let outputDevice;
    try {
        const outputDevices = yield ssh.listOuputDevices();
        if (outputDevices.length === 1) {
            cli_1.cli.stream.success(`Found only 1 output device named: ${outputDevices[0].name}`);
            cli_1.cli.stream.hint('Using this device to output sound');
            outputDevice = outputDevices[0];
        }
        else {
            const response = yield cli_1.cli.prompt.promptList('device', `Found ${outputDevices.length} interfaces to output sound.\n  Choose the one you want to use as your speaker`, outputDevices.map(device => device.name));
            outputDevice = outputDevices.find(device => device.name === response['device']);
        }
    }
    catch (e) {
        cli_1.cli.stream.error(`Error fetching audio output device: ${e.message}`);
    }
    if (outputDevice === undefined) {
        cli_1.cli.stream.error("An output device wasn't found");
        return;
    }
    try {
        yield ssh.setupAsoundConf(outputDevice, captureDevice);
        cli_1.cli.stream.success('Installed /etc/asound.conf');
    }
    catch (e) {
        cli_1.cli.stream.error(`Error installing the microphone asound.conf: ${e.message}`);
        ssh.disconnect();
        process.exit();
    }
    cli_1.cli.stream.println('Setting to volume to 90% if possible');
    yield ssh.setVolumeLevel(outputDevice.card, 90).catch(_ => { });
    cli_1.cli.stream.loading('Restarting snips-audio-server service');
    yield ssh.relaunchService(ssh_1.SnipsServices.audioServer).catch(_ => { });
    cli_1.cli.stream.done();
    cli_1.cli.stream.hint(chalk_1.default `You can test your microphone & speaker with {blue sam test microphone / speaker}`);
    ssh.disconnect();
});
//# sourceMappingURL=audio.js.map