"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const cli_1 = require("../cli");
const session_1 = require("../session");
const utils_1 = require("../utils");
exports.command = 'status';
exports.desc = 'Show the status of your device';
exports.handler = (_) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    cli_1.cli.stream.loading('Fetching device status...');
    const ssh = new session_1.SSHService();
    yield ssh.connect().catch(e => {
        cli_1.cli.stream.stopAndClear();
        if (e.name === utils_1.NO_CREDENTIALS_FOUND) {
            cli_1.cli.stream.println();
            cli_1.cli.stream.println('You are not connected to any device');
            cli_1.cli.stream.println();
            cli_1.cli.stream.println(`To connect to a device, run ${chalk_1.default.blue('sam connect HOSTNAME_OR_IP')}`);
            cli_1.cli.stream.println(`To list devices on the network, run ${chalk_1.default.blue('sam devices')}`);
        }
        else if (e.name === utils_1.SSH_CONNECT_ERROR) {
            cli_1.cli.stream.println();
            if (ssh.credentials.hostname !== undefined && ssh.credentials.hostname !== '') {
                cli_1.cli.stream.error(`Could not establish connection to ${ssh.credentials.hostname}: ${e.message}`, true);
            }
            else {
                cli_1.cli.stream.error(`Could not establish connection to device: ${e.message}`, true);
            }
        }
        else {
            cli_1.cli.stream.println();
            cli_1.cli.stream.error(e.message);
        }
        ssh.disconnect();
        process.exit();
    });
    const servicesStatus = yield ssh.snipsServicesSystemctlStatus().catch(_ => { });
    const packagesVersion = yield ssh.packagesVersion().catch(_ => { });
    const isSnipsInstalled = (packagesVersion !== undefined && packagesVersion.length > 0);
    const assistant = yield ssh.getInstalledAssistant().catch(_ => { });
    const isAssistantInstalled = assistant !== undefined;
    let isAnySnipsServiceLive = false;
    if (servicesStatus !== undefined) {
        servicesStatus.forEach(serviceStatus => { if (serviceStatus.active) {
            isAnySnipsServiceLive = true;
        } });
    }
    const deviceName = ssh.credentials.hostname;
    const osVersion = yield ssh.getOSVersion();
    const assistantStatus = (assistant === undefined) ? 'Not installed' : assistant.name;
    cli_1.cli.stream.stopAndClear();
    let statusString;
    if (!isSnipsInstalled) {
        statusString = chalk_1.default.red('Snips Platform not installed');
    }
    else if (!isAnySnipsServiceLive) {
        if (isAssistantInstalled) {
            statusString = chalk_1.default.yellow('Idle');
        }
        else {
            statusString = `${chalk_1.default.yellow('Idle')} (no assistant)`;
        }
    }
    else if (!isAssistantInstalled) {
        statusString = `${chalk_1.default.green('Live')} (no assistant)`;
    }
    else {
        statusString = chalk_1.default.green('Live');
    }
    const tabSize = 30;
    let statusText = chalk_1.default `\nConnected to device {blue ${deviceName}}\n\n`;
    statusText += `${utils_1.fill('OS version', tabSize)} ${osVersion}\n`;
    if (isSnipsInstalled) {
        statusText += `${utils_1.fill('Installed assistant', tabSize)} ${assistantStatus}\n`;
        if (isAssistantInstalled && assistant !== undefined) {
            statusText += `${utils_1.fill('Language', tabSize)} ${assistant.language}\n`;
            statusText += `${utils_1.fill('Hotword', tabSize)} ${assistant.hotword}\n`;
            statusText += `${utils_1.fill('ASR engine', tabSize)} ${assistant.asr}\n`;
        }
    }
    statusText += `${utils_1.fill('Status', tabSize)} ${statusString}`;
    if (isSnipsInstalled && servicesStatus !== undefined) {
        statusText += '\n\nService status:\n\n';
        servicesStatus.forEach(serviceStatus => {
            const version = getPackageVersion(packagesVersion, serviceStatus.name);
            const versionString = (version !== undefined) ? (`${version} `) : '';
            statusText += `${utils_1.fill(serviceStatus.name, tabSize)} ${versionString}${serviceStatus.active ? chalk_1.default.green('(running)') : chalk_1.default.red('(not running)')}\n`;
        });
    }
    cli_1.cli.stream.println(statusText);
    if (!isSnipsInstalled) {
        cli_1.cli.stream.println(`\nYou may install the Snips Platform using ${chalk_1.default `{blue sam init}`}\nTo install specific components, check the help using ${chalk_1.default `{blue sam init --help}`}`);
    }
    ssh.disconnect();
    process.exit();
});
const getPackageVersion = (packageVersions, packageName) => {
    if (packageVersions === undefined) {
        return undefined;
    }
    let version = undefined;
    packageVersions.forEach(packageVersion => {
        if (packageVersion.name === packageName) {
            version = packageVersion.version;
        }
    });
    return version;
};
//# sourceMappingURL=status.js.map