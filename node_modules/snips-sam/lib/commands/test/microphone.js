"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const cli_1 = require("../../cli");
const ssh_1 = require("../../session/ssh");
exports.command = 'microphone';
exports.desc = 'Test a microphone';
exports.handler = (_) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const ssh = new ssh_1.SSHService();
    yield ssh.connect()
        .catch(e => {
        cli_1.cli.stream.error(e);
        process.exit();
    });
    cli_1.cli.stream.hint('Plug in your microphone and turn on your speaker');
    try {
        cli_1.cli.stream.println('Stopping snips audio server');
        yield ssh.stopService(ssh_1.SnipsServices.audioServer).catch(_ => { });
        const recordingFile = 'sam_recording';
        ssh.recordAudio(recordingFile).catch(_ => { });
        yield cli_1.cli.prompt.waitForKeypress('Say something in the microphone, then press a key to continue...', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            cli_1.cli.stream.success();
        }));
        yield ssh.stopRecording().catch(_ => { });
        cli_1.cli.stream.loading('Playing the recording');
        yield ssh.playAudio(recordingFile).catch(_ => { });
        cli_1.cli.stream.success();
        yield ssh.removeFile(`${recordingFile}.wav`).catch(_ => { });
        cli_1.cli.stream.println('Relaunching snips-audio-server');
        yield ssh.relaunchService(ssh_1.SnipsServices.audioServer).catch(_ => { });
    }
    catch (e) {
        cli_1.cli.stream.stopAndClear();
        cli_1.cli.stream.error(`Error testing the microphone: ${e.message}`);
        ssh.disconnect();
        process.exit();
    }
    cli_1.cli.stream.hint("Didn't hear anything? Check the recording level of your microphone and the volume of the speaker.");
    cli_1.cli.stream.hint(`Alternatively you can run ${chalk_1.default.blue('sam setup audio')} to setup your microphone`);
    ssh.disconnect();
    process.exit();
});
//# sourceMappingURL=microphone.js.map