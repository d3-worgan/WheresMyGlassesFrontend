"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_1 = require("../cli");
const session_1 = require("../session");
exports.command = 'set-hostname <HOSTNAME>';
exports.desc = 'Set device hostname';
exports.handler = (argv) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    let newHostname = argv['HOSTNAME'];
    if (newHostname.length === 0) {
        cli_1.cli.stream.error("Hostname can't be empty");
    }
    if (newHostname.includes('.local')) {
        cli_1.cli.stream.error("You don't need to include the .local, removing it");
        newHostname = newHostname.replace('.local', '');
    }
    const validHostnameRegex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/;
    if (!validHostnameRegex.test(newHostname)) {
        cli_1.cli.stream.error(`The hostname is not valid.\
        \n  Please note: RFCs mandate that a hostname's labels may contain\
        \n  only the ASCII letters 'a' through 'z' (case-insensitive),\
        \n  the digits '0' through '9', and the hyphen.\
        \n  Hostname labels cannot begin or end with a hyphen.\
        \n  No other symbols, punctuation characters, or blank spaces are permitted.`);
        return;
    }
    cli_1.cli.stream.loading('Changing hostname');
    const ssh = new session_1.SSHService();
    yield ssh.connect().catch(error => {
        cli_1.cli.stream.error(error);
        process.exit();
    });
    yield ssh.setHostname(newHostname)
        .then(_ => {
        cli_1.cli.stream.success('Device hostname changed. Rebooting now.');
    })
        .catch(error => {
        cli_1.cli.stream.error(`Error changing hostname, reason: ${error.message}`);
    });
    ssh.disconnect();
});
//# sourceMappingURL=set-hostname.js.map