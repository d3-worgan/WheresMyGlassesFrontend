"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yaml = require("js-yaml");
const path = require("path");
const fs = require("fs");
const utils_1 = require("../utils");
class HassConfiguration {
    static parse(file) {
        const stringRepresentation = file.replace(/!(include|secret|include_dir_list|include_dir_named|include_dir_merge_list|include_dir_merge_named)/g, '.$1');
        return yaml.safeLoad(stringRepresentation, { json: true });
    }
    static generateSnipsConfiguration(originalYaml, assistant, hassSnippets) {
        const intentsJSON = {};
        hassSnippets.forEach((actions, skillName) => {
            actions.forEach(action => {
                const intent = assistant.intents.find(intent => action.toLowerCase() === intent.id.toLowerCase());
                if (intent === undefined)
                    return;
                const dataTemplate = {};
                intent.slots.forEach(slot => {
                    dataTemplate[slot.name] = `{{ ${slot.name} }}`;
                });
                const service = `python_script.action_${action.toLowerCase()}_${skillName}`;
                intentsJSON[intent.id] = { action: [{ service, data_template: dataTemplate }] };
            });
        });
        delete originalYaml['snips'];
        delete originalYaml['python_script'];
        delete originalYaml['intent_script'];
        if (originalYaml['mqtt'] === undefined) {
            originalYaml['mqtt'] = { broker: '127.0.0.1', port: 1883 };
        }
        originalYaml['python_script'] = null;
        originalYaml['snips'] = null;
        originalYaml['intent_script'] = intentsJSON;
        const snipsYAML = yaml.safeDump(originalYaml)
            .replace(/.(include|secret|include_dir_list|include_dir_named|include_dir_merge_list|include_dir_merge_named)/g, '!$1')
            .replace(/null/g, '');
        const filePath = path.join(utils_1.samConfigDirectory, 'hassconfiguration.yaml');
        fs.writeFileSync(filePath, snipsYAML);
        return filePath;
    }
}
exports.HassConfiguration = HassConfiguration;
class HassMQTT {
    constructor(yamlDoc) {
        if (!yamlDoc)
            return;
        this.broker = yamlDoc.broker;
        this.port = yamlDoc.port;
    }
}
exports.HassMQTT = HassMQTT;
//# sourceMappingURL=hassConfiguration.js.map